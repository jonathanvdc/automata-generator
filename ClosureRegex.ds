using System;
using System.Collections.Generic;

namespace Automata
{
    /// <summary>
    /// Defines a regex type that represents the closure of a given regex,
    /// which matches the language of said regex zero or more times.
    /// </summary>
    public class ClosureRegex : IRegex
    {
        /// <summary>
        /// Creates a new closure regex from the given regex.
        /// </summary>
        public const this(set IRegex Regex);

        /// <summary>
        /// Gets the inner regex.
        /// </summary>
        public IRegex Regex { const get; private set; }

        public const string ToString()
        {
            return "(" + Regex.ToString() + ")" + "*";
        }

        /// <summary>
        /// Creates an epsilon-nfa for this closure regex.
        /// The construction is as follows:
        ///   * An automaton is constructed for the closure regex' inner regex.
        ///   * A new start state and a single accepting state are created.
        ///   * An automaton is created that consists of:
        ///     * The inner regex' automaton
        ///     * The new start and accepting states
        ///     * epsilon transitions that connect the inner automaton's start and
        ///       end states with the new automaton's start and end states.
        ///       Also, a "loop" is created to facilitate the closure.
        /// </summary>
        public const ENFAutomaton<RegexState, char> ToENFAutomaton()
        {
            var innerAutomaton = Regex.ToENFAutomaton();

            var transTable = innerAutomaton.TransitionFunction;

            var startState = new RegexState();
            var endState = new RegexState();

            var starTrans = new StateSet<RegexState>();
            starTrans.Add(innerAutomaton.StartState);
            starTrans.Add(endState);
            transTable.Add(startState, default(Optional<char>), starTrans);

            var innerEndStates = innerAutomaton.AcceptingStates;

            foreach (var item in innerEndStates)
            {
                transTable.Add(item, default(Optional<char>), starTrans);
            }

            var acceptingStates = new StateSet<RegexState>(endState);

            return new ENFAutomaton<RegexState, char>(startState, acceptingStates, transTable);
        }
    }
}
