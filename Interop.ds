using System;
using System.Collections.Generic;

namespace Automata
{
    /// <summary>
    /// Represents a DFA "handle", which is a convenience object that makes
    /// interacting with DFAs easier.
    /// </summary>
    public class DFAHandle
    {
        public const this(set DFAutomaton<int, char> Automaton)
        {
            this.Alphabet = Automaton.GetAlphabet();
        }

        public DFAutomaton<int, char> Automaton { const get; private set; }
        public StateSet<char> Alphabet { const get; private set; }
        public [int] States { const get return Automaton.GetStates(); }

        public const DFAState GetInitialState()
        {
            return new DFAState(this, Automaton.StartState, false);
        }

        /// <summary>
        /// Optimizes this handle's underlying DFA, and returns a handle to said
        /// optimized DFA.
        /// </summary>
        public const DFAHandle Optimize()
        {
            return new DFAHandle(Interop.IndexAutomaton<StateSet<int>, char>(Automaton.Optimize()));
        }
    }

    /// <summary>
    /// Represents a DFA in a specific, possibly invalid, state.
    /// </summary>
    public struct DFAState
    {
        public const this(set DFAHandle Automaton, set int state, set bool isInvalid);

        public DFAHandle Automaton { const get; private set; }

        public const bool Accepts()
        {
            return !isInvalid && Automaton.Automaton.IsAcceptingState(state);
        }

        public const DFAState AddInput(string Data)
        {
            if (isInvalid)
    		{
    			return this;
    		}

    		var managed = state;
    		int s = state;
            var a = Automaton.Automaton;
            for (int i = 0; i < Data.Length; i++)
    		{
                char item = Data[i];

    			if (Automaton.Alphabet.Contains(item))
    			{
    				s = a.PerformTransition(s, item);
    			}
    			else
    			{
    				return new DFAState(Automaton, s, true);
    			}
    		}
    		return new DFAState(Automaton, s, false);
        }

        private int state;
        private bool isInvalid;
    }

    /// <summary>
    /// A closure object that provides a renaming function.
    /// This is equivalent to a lambda that captures the 'indices' dictionary.
    /// </summary>
    public class IndexAutomatonClosure<T>
        where T : object
    {
        public const this()
        {
            this.indices = new Dictionary<T, int>();
        }

        private Dictionary<T, int> indices;

        public const int Index(T Value)
        {
            if (indices.ContainsKey(Value))
                return indices[Value];
            else
            {
                int i = indices.Count;
                indices[Value] = i;
                return i;
            }
        }
    }

    /// <summary>
    /// The automata interop class.
    /// </summary>
    public static class Interop
    {
        private const T Id<T>(T Value)
        {
            return Value;
        }

        /// <summary>
        /// Converts any automaton to an indexed automaton.
        /// </summary>
        public const DFAutomaton<int, TChar> IndexAutomaton<T, TChar>(DFAutomaton<T, TChar> Automaton)
            where T : object
        {
            var closure = new IndexAutomatonClosure<T>();
            return Automaton.Rename<int, TChar>(closure.Index, Id<TChar>);
        }

        /// <summary>
        /// Converts any automaton to an indexed automaton.
        /// </summary>
        public const ENFAutomaton<int, TChar> IndexAutomaton<T, TChar>(ENFAutomaton<T, TChar> Automaton)
            where T : object
        {
            var closure = new IndexAutomatonClosure<T>();
            return Automaton.Rename<int, TChar>(closure.Index, Id<TChar>);
        }

        private string ConvertToString<T>(T Value)
            where T : object
        {
            return Value.ToString();
        }

        /// <summary>
        /// Converts this automaton to an equivalent automaton whose states and
        /// symbols are all strings.
        /// </summary>
        public const DFAutomaton<string, string> ToStringAutomaton<TState, TChar>(
            DFAutomaton<TState, TChar> Automaton)
            where TState : object
            where TChar : object
        {
            return Automaton.Rename<string, string>(ConvertToString<TState>, ConvertToString<TChar>);
        }

        /// <summary>
        /// Converts this automaton to an equivalent automaton whose states and
        /// symbols are all strings.
        /// </summary>
        public const ENFAutomaton<string, string> ToStringAutomaton<TState, TChar>(
            ENFAutomaton<TState, TChar> Automaton)
            where TState : object
            where TChar : object
        {
            return Automaton.Rename<string, string>(ConvertToString<TState>, ConvertToString<TChar>);
        }

        /// <summary>
        /// Compiles the given regex to an indexed DFA handle.
        /// </summary>
        public const DFAHandle CompileRegex(string Regex)
        {
            var regex = RegexParser.ParseRegex(Regex);

    		var enfa = regex.ToENFAutomaton();

    		var dfa = enfa.ToDFAutomaton();

    		var renamedDFa = IndexAutomaton<StateSet<RegexState>, char>(dfa);

    		return new DFAHandle(renamedDFa);
        }
    }
}
