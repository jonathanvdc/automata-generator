using System;
using System.Collections.Generic;

namespace Automata
{
    /// <summary>
    /// A regular expression that represents the concatenation of two other regular
    /// expressions.
    /// </summary>
    public class ConcatRegex : IRegex
    {
        /// <summary>
        /// Creates a new concat regex for the given operands.
        /// </summary>
        public const this(set IRegex Left, set IRegex Right);

        /// <summary>
        /// Gets the concat regex's left operand.
        /// </summary>
        public IRegex Left { const get; private set; }
        /// <summary>
        /// Gets the concat regex's right operand.
        /// </summary>
        public IRegex Right { const get; private set; }

        public const IRegex Optimize()
        {
            var lopt = Left.Optimize();
            var ropt = Right.Optimize();

            if (lopt == PhiRegex || ropt == PhiRegex)
            {
                return PhiRegex;
            }
            else if (lopt == EpsilonRegex)
            {
                return ropt;
            }
            else if (ropt == EpsilonRegex)
            {
                return lopt;
            }
            else
            {
                return new ConcatRegex(lopt, ropt);
            }
        }

        public const string ToString()
        {
            string result = "";
            if (Left is UnionRegex)
            {
                result = "(" + Left.ToString() + ")";
            }
            else result = Left.ToString();
            if (Right is UnionRegex)
            {
                result = result + "(" + Right.ToString() + ")";
            }
            else result = result + Right.ToString();
            return result;
        }

        public override const int GetHashCode()
        {
            return Left.GetHashCode() << 16 ^ Right.GetHashCode();
        }

        public override const bool Equals(object Other)
        {
            if (Other is ConcatRegex)
            {
                var otherConcat = (ConcatRegex)Other;

                return this.Left == otherConcat.Left && this.Right == otherConcat.Right;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Creates an epsilon-nfa for this concatenation regex.
        /// The construction is as follows:
        ///   * Automata are constructed for the left and right operands of this concat operation.
        ///   * These automata are "merged":
        ///     * The start state of the resulting automaton is the start state
        ///       of the left operand's automaton.
        ///     * The accepting states of the resulting automaton is the set of accepting
        ///       states of the right operand's automaton.
        ///   * For each accepting state in the left automaton, an epsilon-transition
        ///     is added to the resulting automaton that starts at said accepting
        ///     state and points to the right automaton's intial state.
        /// </summary>
        public const ENFAutomaton<RegexState, char> ToENFAutomaton()
        {
            // NOTE: default(Optional<char>) indicates an epsilon-transition.

            var leftAutomaton = Left.ToENFAutomaton();
            var rightAutomaton = Right.ToENFAutomaton();

            var startState = new RegexState();

            var transTable = leftAutomaton.TransitionFunction;
            transTable.Add(rightAutomaton.TransitionFunction);

            foreach (var item in leftAutomaton.AcceptingStates)
            {
                AutomatonGenerator.AddEpsilonTransition<RegexState, char>(transTable, item, rightAutomaton.StartState);
            }

            var acceptingStates = rightAutomaton.AcceptingStates;

            return new ENFAutomaton<RegexState, char>(leftAutomaton.StartState, acceptingStates, transTable);
        }
    }
}
