using System;
using System.Collections.Generic;

namespace Automata
{
    /// <summary>
    /// Defines a regex state, which is used in conjunction with reference equality.
    /// </summary>
    public class RegexState
    {
        /// <summary>
        /// Creates a unique regex state.
        /// </summary>
        public const this();
    }

    /// <summary>
    /// Defines a generic regular expression.
    /// </summary>
    public interface IRegex
    {
        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// </summary>
        const ENFAutomaton<RegexState, char> ToENFAutomaton();

        /// <summary>
        /// Produces an optimized version of this regex.
        /// </summary>
        const IRegex Optimize();

        /// <summary>
        /// Gets this regex's string representation.
        /// </summary>
        const string ToString();
    }

    /// <summary>
    /// Defines a literal regex, which is a regex that matches a single symbol.
    /// </summary>
    public class LiteralRegex : IRegex
    {
        alias TransitionTable = TransitionMap<RegexState, Optional<char>, StateSet<RegexState>>;

        /// <summary>
        /// Creates a literal regex for the given symbol.
        /// </summary>
        public const this(set char Literal);

        /// <summary>
        /// Gets the literal regex's literal or symbol.
        /// </summary>
        public char Literal { const get; private set; }

        public const IRegex Optimize()
        {
            return this;
        }

        public const string ToString()
        {
            return (string)Literal;
        }

        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// The construction is as follows:
        ///    start literal end.
        /// where 'start' is the initial state, 'end' is an accepting state,
        /// and 'literal' is this regex' literal.
        /// </summary>
        public const ENFAutomaton<RegexState, char> ToENFAutomaton()
        {
            var startState = new RegexState();
            var acceptingStates = new StateSet<RegexState>();
            acceptingStates.Add(new RegexState());
            var transitions = new TransitionTable();
            transitions[startState, new Optional<char>(Literal)] = acceptingStates;
            return new ENFAutomaton<RegexState, char>(startState, acceptingStates, transitions);
        }

        public override const int GetHashCode()
        {
            return Literal.GetHashCode();
        }

        public override const bool Equals(object Other)
        {
            if (Other is LiteralRegex)
            {
                return Literal == ((LiteralRegex)Other).Literal;
            }
            else
            {
                return false;
            }
        }
    }

    /// <summary>
    /// Defines an epsilon regex, which matches the empty string.
    /// </summary>
    public static class EpsilonRegex : IRegex
    {
        alias TransitionTable = TransitionMap<RegexState, Optional<char>, StateSet<RegexState>>;

        public const string ToString()
        {
            return "\\e";
        }

        public const IRegex Optimize()
        {
            return this;
        }

        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// The construction is as follows:
        ///    start -> end.
        /// where 'start' is the initial state, 'end' is an accepting state,
        /// and '->' is an epsilon-transition.
        /// </summary>
        public const ENFAutomaton<RegexState, char> ToENFAutomaton()
        {
            var startState = new RegexState();
            var acceptingStates = new StateSet<RegexState>();
            acceptingStates.Add(new RegexState());
            var transitions = new TransitionTable();
            transitions[startState, default(Optional<char>)] = acceptingStates;
            return new ENFAutomaton<RegexState, char>(startState, acceptingStates, transitions);
        }
    }

    /// <summary>
    /// Defines a phi regex, which matches nothing.
    /// </summary>
    public static class PhiRegex : IRegex
    {
        alias TransitionTable = TransitionMap<RegexState, Optional<char>, StateSet<RegexState>>;

        public const IRegex Optimize()
        {
            return this;
        }

        public const string ToString()
        {
            return "\\p";
        }

        /// <summary>
        /// Constructs an epsilon-nfa for this regex.
        /// The construction is as follows:
        ///    start.
        /// where 'start' is the initial state. There are no transitions, and no
        /// accepting states.
        /// </summary>
        public const ENFAutomaton<RegexState, char> ToENFAutomaton()
        {
            var startState = new RegexState();
            var acceptingStates = new StateSet<RegexState>();
            var transTable = new TransitionTable();
            return new ENFAutomaton<RegexState, char>(startState, acceptingStates, transTable);
        }
    }
}
