using System;
using System.Collections.Generic;
using System.Linq;

namespace Automata
{
    public static class AutomatonGenerator
    {
        public StateSet<char> GenerateAlphabet(Random rand, int Size)
        {
            var alpha = new StateSet<char>();
            for (int i = 0; i < Size; i++)
            {
                char val;
                do
                {
                    val = (char)((int)'a' + rand.Next(0, 26));
                } while (alpha.Contains(val));
                alpha.Add(val);
            }
            return alpha;
        }

        public StateSet<object> GenerateStates(int Count)
        {
            var results = new StateSet<object>();
            for (int i = 0; i < Count; i++)
            {
                results.Add(new object());
            }
            return results;
        }

        public T GetRandomElement<T>([T] Values, Random rand)
        {
            int index = rand.Next(0, Enumerable.Count<T>(Values));
            return Enumerable.ElementAt<T>(Values, index);
        }

        public StateSet<T> GetRandomSubset<T>([T] Values, Random rand, int Size)
        {
            var results = new StateSet<T>();
            while (results.Count < Size)
            {
                results.Add(GetRandomElement<T>(Values, rand));
            }
            return results;
        }

        public DFAutomaton<object, char> GenerateDFAutomaton(Random rand,
            int StateCount, int AlphabetSize, int AcceptCount)
        {
            var alpha = GenerateAlphabet(rand, AlphabetSize);
            var states = GenerateStates(StateCount);

            return GenerateDFAutomaton(rand, states, alpha, AcceptCount);
        }

        public DFAutomaton<object, char> GenerateDFAutomaton(Random rand,
            [object] States, [char] Alphabet, int AcceptCount)
        {
            object start = GetRandomElement<object>(States, rand);
            var accepting = GetRandomSubset<object>(States, rand, AcceptCount);

            var trans = new TransitionMap<object, char, object>();

            foreach (var from in States)
            foreach (var sym in Alphabet)
            {
                trans[from, sym] = GetRandomElement<object>(States, rand);
            }

            return new DFAutomaton<object, char>(start, accepting, trans);
        }

        public ENFAutomaton<object, char> GenerateENFAutomaton(Random rand, bool AllowEpsilon,
            int StateCount, int AlphabetSize, int AcceptCount, int TransitionCount)
        {
            var alpha = GenerateAlphabet(rand, AlphabetSize);
            var states = GenerateStates(StateCount);

            object start = GetRandomElement<object>(states, rand);
            var accepting = GetRandomSubset<object>(states, rand, AcceptCount);

            var trans = GenerateTransitions<object, char>(rand, AllowEpsilon, TransitionCount, states, alpha);

            return new ENFAutomaton<object, char>(start, accepting, trans);
        }

        public ENFAutomaton<int, char> GenerateIndexedENFAutomaton(Random rand, bool AllowEpsilon,
            int StateCount, int AlphabetSize, int AcceptCount, int TransitionCount)
        {
            var automaton = GenerateENFAutomaton(rand, AllowEpsilon, StateCount,
                                                 AlphabetSize, AcceptCount,
                                                 TransitionCount);
            return Interop.IndexAutomaton<object, char>(automaton);
        }

        public bool AddTransition<TState, TChar>(
            TransitionMap<TState, Optional<TChar>, StateSet<TState>> Map,
            TState FromState, Optional<TChar> Symbol, TState ToState)
        {
            if (!Map.Contains(FromState, Symbol))
            {
                Map[FromState, Symbol] = new StateSet<TState>();
            }
            return Map[FromState, Symbol].Add(ToState);
        }

        public TransitionMap<TState, Optional<TChar>, StateSet<TState>> GenerateTransitions<TState, TChar>(
            Random rand, bool AllowEpsilon, int TransitionCount, [TState] States, [TChar] Alpha)
        {
            var results = new TransitionMap<TState, Optional<TChar>, StateSet<TState>>();

            for (int i = 0; i < TransitionCount; i++)
            {
                bool success;
                do
                {
                    var fromState = GetRandomElement<TState>(States, rand);
                    var toState = GetRandomElement<TState>(States, rand);

                    Optional<TChar> transSym;
                    if (AllowEpsilon && rand.Next(0, 3) == 0)
                        transSym = default(Optional<TChar>);
                    else
                        transSym = new Optional<TChar>(GetRandomElement<TChar>(Alpha, rand));

                    success = AddTransition<TState, TChar>(results, fromState, transSym, toState);
                } while (!success);
            }

            return results;
        }

        /// <summary>
        /// Randomly complicates the given DFA. An upper bound on the number of states
        /// that are to be added to the DFA is given as an integer argument.
        /// No unreachable states will be added.
        /// </summary>
        public DFAutomaton<int, TChar> ComplicateRandomly<TChar>(DFAutomaton<int, TChar> Automaton, Random rand, int Amount)
        {
            var accept = new StateSet<int>(Automaton.AcceptingStates);
            var trans = new TransitionMap<int, TChar, int>(Automaton.TransitionFunction);
            var states = Automaton.GetStates();
            var alpha = Automaton.GetAlphabet();

            // Keep track of a counter that represents the numerically greatest state.
            // We'll use this to create new states, as we know that any value
            // which is greater still cannot possibly be a pre-existing state in the
            // automaton. (This is true for reasonable integer values only.)
            int stateCount = Enumerable.Max<int>(states) + 1;

            // Select a state to complicate.
            int targetState = GetRandomElement<int>(states, rand);

            // Creates a set of new states.
            var newStates = new StateSet<int>();
            for (int i = 0; i < Amount; i++)
            {
                newStates.Add(stateCount);

                if (accept.Contains(targetState))
                {
                    newStates.Add(stateCount); // Take care to replicate acceptance
                                               // behavior for states.
                }

                stateCount++;
            }

            // Copy the chosen state (identified by `replIndex`)
            foreach (var from in newStates)
            foreach (var sym in alpha)
            {
                trans[from, sym] = trans[targetState, sym];
            }

            newStates.Add(targetState); // Add the original state to the set of new states.

            // Now rewrite any transition that targets the original target state
            // to target a random element of the state group.

            // Find those transitions first.
            var stateSetTransitions = new List<KeyValuePair<int, TChar>>();
            foreach (var item in trans)
                if (item.Item3 == targetState)
            {
                stateSetTransitions.Add(new KeyValuePair<int, TChar>(item.Item1, item.Item2));
            }

            // Rewrite them.
            foreach (var item in stateSetTransitions)
            {
                trans[item.Key, item.Value] = GetRandomElement<int>(newStates, rand);
            }

            return new DFAutomaton<int, TChar>(Automaton.StartState, accept, trans).RemoveUnreachable();
        }

        /// <summary>
        /// Randomly complicates the given DFA. An upper bound on the number of states
        /// that are to be added to the DFA per iteration is given as an integer argument.
        /// The process is repeated for the given amount of iterations.
        /// No unreachable states will be added.
        /// </summary>
        public DFAutomaton<int, TChar> ComplicateRandomly<TChar>(DFAutomaton<int, TChar> Automaton, Random rand, int Amount, int Iterations)
        {
            var result = Automaton;
            for (int i = 0; i < Iterations; i++)
            {
                result = ComplicateRandomly<TChar>(result, rand, Amount);
            }
            return result;
        }
    }
}
