using System;
using System.Collections.Generic;
using System.Linq;

namespace Automata
{
    /// <summary>
    /// Defines a regex type that is the union of two other regex.
    /// </summary>
    public class UnionRegex : IRegex
    {
        public const this(set IRegex Left, set IRegex Right);

        public IRegex Left { const get; private set; }
        public IRegex Right { const get; private set; }

        private static void AddToUnionSet(StateSet<IRegex> Set, IRegex Regex)
        {
            if (Regex is UnionRegex)
            {
                var unionRe = (UnionRegex)Regex;
                AddToUnionSet(Set, unionRe.Left);
                AddToUnionSet(Set, unionRe.Right);
            }
            else
            {
                Set.Add(Regex);
            }
        }

        public static StateSet<IRegex> ToUnionSet(IRegex Regex)
        {
            var hashSet = new StateSet<IRegex>();
            AddToUnionSet(hashSet, Regex);
            return hashSet;
        }

        public static const IRegex Create(IRegex First, IRegex Second)
        {
            if (First == PhiRegex)
                return Second;
            else if (Second == PhiRegex)
                return First;
            else
                return new UnionRegex(First, Second);
        }

        public static const IRegex Create([IRegex] Values)
        {
            if (!Enumerable.Any<IRegex>(Values))
            {
                return PhiRegex;
            }
            else
            {
                return Enumerable.Aggregate<IRegex>(Values, Create);
            }
        }

        public const IRegex Optimize()
        {
            var lopt = Left.Optimize();
            var ropt = Right.Optimize();

            return Create(ToUnionSet(Create(lopt, ropt)));
        }

        public override const int GetHashCode()
        {
            return ToUnionSet(this).GetHashCode();
        }

        public override const bool Equals(object Other)
        {
            if (Other is UnionRegex)
            {
                return ToUnionSet(this) == ToUnionSet((UnionRegex)Other);
            }
            else
            {
                return false;
            }
        }

        public const string ToString()
        {
            return Left.ToString() + "+" + Right.ToString();
        }

        /// <summary>
        /// Creates an epsilon-nfa for this union regex.
        /// The construction is as follows:
        ///   * Automata are constructed for the left and right operands of this union operation.
        ///   * These automata are "merged":
        ///     * A new start state is created, with epsilon-transitions going out
        ///       to the left and right automata.
        ///     * The accepting states of the resulting automaton is union of the
        ///       accepting states of the left and right operands' automata.
        /// </summary>
        public const ENFAutomaton<RegexState, char> ToENFAutomaton()
        {
            var startState = new RegexState();
            var finalState = new RegexState();

            var leftAutomaton = Left.ToENFAutomaton();
            var rightAutomaton = Right.ToENFAutomaton();

            var transTable = leftAutomaton.TransitionFunction;
            transTable.Add(rightAutomaton.TransitionFunction);

            var redirectedStates = new StateSet<RegexState>(leftAutomaton.StartState);
            redirectedStates.Add(rightAutomaton.StartState);
            transTable.Add(startState, default(Optional<char>), redirectedStates);

            var oldAcceptingStates = new StateSet<RegexState>(leftAutomaton.AcceptingStates);
            oldAcceptingStates.UnionWith(rightAutomaton.AcceptingStates);

            foreach (var item in oldAcceptingStates)
                AutomatonGenerator.AddEpsilonTransition<RegexState, char>(transTable, item, finalState);

            return new ENFAutomaton<RegexState, char>(
                startState,
                new StateSet<RegexState>(finalState),
                transTable);
        }
    }
}
