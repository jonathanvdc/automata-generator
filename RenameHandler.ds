using System;
using System.Collections.Generic;
using System.Linq;

namespace Automata
{
    public class DictionaryRenamerClosure
    {
        public const this(set Dictionary<string, string> dict);

        private Dictionary<string, string> dict;

        public const string Rename(string Value)
        {
            if (dict.ContainsKey(Value))
                return dict[Value];
            else
                return Value;
        }
    }

    public static class RenameHandler : IHandler
    {
        public string Usage { const get return "input-path output-path new-alphabet new-states [old-alphabet old-states]"; }

        private [string] ParseCharacters(string Input, [string] Default)
        {
            if (string.IsNullOrEmpty(Input))
            {
                return Default;
            }

            string[] split = Input.Split(new char[] { ',' });
            if (split.Length == 1)
            {
                var results = new List<string>();
                foreach (var item in split)
                for (int i = 0; i < item.Length; i++)
                {
                    results.Add((string)item[i]);
                }
                return results;
            }
            else
            {
                return split;
            }
        }

        public Tuple<string(string), string(string)> CreateRenamers(
            ConsoleArguments Args, [string] States, [string] Alphabet)
        {
            alias RenamerFunction = string(string);

            [string] newAlpha  = ParseCharacters(Args.GetArgumentString(2, null), Alphabet);
            [string] newStates = ParseCharacters(Args.GetArgumentString(3, null), States);
            [string] oldAlpha  = ParseCharacters(Args.GetArgumentString(4, null), Alphabet);
            [string] oldStates = ParseCharacters(Args.GetArgumentString(5, null), States);

            var stateDict = new Dictionary<string, string>();

            foreach (var oldItem in oldStates, var newItem in newStates)
            {
                stateDict[oldItem] = newItem;
            }

            var alphaDict = new Dictionary<string, string>();

            foreach (var oldItem in oldAlpha, var newItem in newAlpha)
            {
                alphaDict[oldItem] = newItem;
            }

            var stateRenamer = new DictionaryRenamerClosure(stateDict);
            var alphaRenamer = new DictionaryRenamerClosure(alphaDict);

            return Tuple.Create<RenamerFunction, RenamerFunction>(
                stateRenamer.Rename, alphaRenamer.Rename);
        }

        public void Run(ConsoleArguments Args)
        {
            var ifs = Args.OpenArgumentFileRead(0, "input.dfa");
            var automaton = AutomatonParser.ParseUnknownAutomaton(ifs);
            ifs.Dispose();

            if (automaton is DFAutomaton<string, string>)
            {
                var dfa = (DFAutomaton<string, string>)automaton;

                var renamers = CreateRenamers(Args, dfa.GetStates(), dfa.GetAlphabet());

                var stringDfa = dfa.Rename<string, string>(renamers.Item1, renamers.Item2);

                var ofs = Args.OpenArgumentFileWrite(1, "output.dfa");
                AutomatonParser.PrintDFAutomaton(ofs, stringDfa);
                ofs.Dispose();
            }
            else
            {
                var enfa = (ENFAutomaton<string, string>)automaton;

                var renamers = CreateRenamers(Args, enfa.GetStates(), enfa.GetAlphabet());

                var stringEnfa = enfa.Rename<string, string>(renamers.Item1, renamers.Item2);

                var ofs = Args.OpenArgumentFileWrite(1, "output.enfa");
                AutomatonParser.PrintENFAutomaton(ofs, stringEnfa);
                ofs.Dispose();
            }
        }
    }
}
